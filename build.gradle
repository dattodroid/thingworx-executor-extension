apply plugin: 'java' 
apply plugin: 'eclipse' 
 
defaultTasks 'clean', 'build' 
 
java { 
    toolchain { 
        languageVersion = JavaLanguageVersion.of(11) 
    } 
} 
 
ext { 
    startTime = new Date() 
     
    env = System.getenv() 
    jvmVersion = org.gradle.internal.jvm.Jvm.current() 
    package_version = "1.0.0" 
    project_vendor = "" 
    twx_eclipse_plugin_version = "" 
     
    loadExtensionProperties() 
     
    buildNumber = System.getenv("BUILD_NUMBER") ?: package_version 
     
    jarName = transformProjectName(project.name) 
    zipName = project.name 
} 
 
repositories { 
    mavenCentral() 
} 
 
def transformProjectName(name) { 
    return name.toLowerCase().replace(' ', '_') 
} 
 
configurations { 
    importedProjectJar 
} 
 
project.tasks.withType(JavaCompile).configureEach { 
    options.release.set(11) 
} 
 
def loadExtensionProperties() { 
    def props = new Properties() 
    def propFile = file("extension.properties")  
    if (propFile.exists()) { 
        propFile.withInputStream { 
            stream -> props.load(stream) 
        } 
    } else { 
        logger.warn('WARNING - Properties file: extension.properties, does not exist! Extension META.INF will not have all extension details.') 
    } 
    props.each { key, val -> 
        project.ext[key] = val 
    } 
} 
 
dependencies { 
    implementation fileTree(dir:'twx-lib', include:'*.jar') 
    implementation fileTree(dir:'lib', include:'*.jar') 
    importedProjectJar fileTree(dir:'lib', include: jarName+'.jar') 
} 
 
sourceSets { 
    main { 
        java { 
            srcDir 'src' 
        } 
    } 
} 
 
jar { 
    archiveBaseName = jarName 
 
    manifest { 
        attributes("Created-By": jvmVersion, 
            "Built-By": "Eclipse Plugin for ThingWorx Extension Development " + twx_eclipse_plugin_version, 
            "Build-Date": startTime) 
        attributes( [ "Package-Title": project.name, 
            "Package-Version": buildNumber, 
            "Package-Vendor": project_vendor ], project.name) 
    } 
 
    from { 
        configurations.importedProjectJar.collect { it.isDirectory() ? it : zipTree(it) } 
    } 
} 
 
task createZip(type:Zip) { 
     archiveBaseName = zipName 
 
    // include the metadata.xml 
    from 'configfiles' 
        include 'metadata.xml' 
 
    if (!fileTree('src').isEmpty()) { // if any java exists 
        // this will include the built jar for this extension's java code 
        from ('build/libs') { 
            include jarName + '.jar' 
            into 'lib/common' 
        } 
    } 
 
    // include the Entity xml files included in this plugin 
    from ('Entities') { 
        include '**/*.xml' 
        into 'Entities' 
    } 
 
    // include the Localization json files included in this plugin 
    from ('Localization') { 
        include '**/*.json' 
        into 'Localization' 
    } 
 
    // including all jars from the lib folder 
    from ('lib') { 
        include '**/*.jar' 
        exclude jarName + '.jar' 
        into 'lib/common' 
    } 
 
    // for if there are widgets in the extension 
    from ('ui') { 
        include '**/*.*' 
        into 'ui' 
    } 
 
} 
 
createZip.dependsOn('jar') 
 
build.finalizedBy(createZip) 
